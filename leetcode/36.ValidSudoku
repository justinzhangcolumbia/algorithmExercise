# 36. Valid Sudoku
Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.

The Sudoku board could be partially filled, where empty cells are filled with the character '.'.

## Solution 1:
```
public boolean isValidSudoku(char[][] board) {
    if (board == null || board.length == 0 || board[0].length == 0) {
        return true;
    }
    int len = board.length;
    //check the rows and columns
    for (int i = 0; i < len; i++) {
        int[] temp1 = new int[10];
        int[] temp2 = new int[10];
        for (int j = 0; j < len; j++) {
            if (board[i][j] != '.') {
                if (temp1[board[i][j] - '0'] != 0) {
                    return false;
                }
                temp1[board[i][j] - '0'] = 1;
            }
            if (board[j][i] != '.') {
                if (temp2[board[j][i] - '0'] != 0) {
                    return false;
                }
                temp2[board[j][i] - '0'] = 1;
            }
        }
    }
    for (int i = 0; i < len / 3; i++) {
        for (int j = 0; j < len / 3; j++) {
            int[] temp = new int[10];
            for (int m = 0; m < 3; m++) {
                for (int n = 0; n < 3; n++) {
                    if (board[i * 3 + m][j * 3 + n] != '.') {
                        if (temp[board[i * 3 + m][j * 3 + n] - '0'] != 0) {
                            return false;
                        }
                        temp[board[i * 3 + m][j * 3 + n] - '0'] = 1;
                    } 
                }

            }
        }
    }
    return true;
}
```
代码有些长，优化一些cube检查的部分
```
public boolean isValidSudoku(char[][] board) {
    if (board == null || board.length == 0 || board[0].length == 0) {
        return true;
    }
    int len = board.length;
    //check the rows and columns
    for (int i = 0; i < len; i++) {
        int[] temp1 = new int[10];
        int[] temp2 = new int[10];
        int[] temp3 = new int[10];
        for (int j = 0; j < len; j++) {
            if (board[i][j] != '.') {
                if (temp1[board[i][j] - '0'] != 0) {
                    return false;
                }
                temp1[board[i][j] - '0'] = 1;
            }
            if (board[j][i] != '.') {
                if (temp2[board[j][i] - '0'] != 0) {
                    return false;
                }
                temp2[board[j][i] - '0'] = 1;
            }
            int x = 3 * (i / 3) + j / 3;
            int y = 3 * (i % 3) + j % 3;
            if (board[x][y] != '.') {
                if (temp3[board[x][y] - '0'] != 0) {
                    return false;
                }
                temp3[board[x][y] - '0'] = 1;
            }
        }
    }
    return true;
}
```
## 总结：
题目比较简单，看看怎么让代码更加elegant
