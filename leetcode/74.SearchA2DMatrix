# 74. Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:
```
[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
```
Given target = 3, return true.
## Solution:
直接把matrix展开成一维度的，用binary search做
```
public boolean searchMatrix(int[][] matrix, int target) {
    if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
        return false;
    }
    int row = matrix.length;
    int col = matrix[0].length;
    int left = 0;
    int right = row * col - 1;
    while (left + 1 < right) {
        int mid = left + (right - left) / 2;
        int x = mid / col;
        int y = mid % col;
        if (matrix[x][y] == target) {
            return true;
        }
        if (matrix[x][y] > target) {
            right = mid;
        } else {
            left = mid;
        }
    }
    if (matrix[left / col][left % col] == target 
    || matrix[right / col][right % col] == target) {
        return true;
    }
    return false;
}
```
